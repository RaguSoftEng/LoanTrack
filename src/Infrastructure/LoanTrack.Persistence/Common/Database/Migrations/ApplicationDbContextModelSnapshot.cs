// <auto-generated />
using System;
using LoanTrack.Persistence.Common.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LoanTrack.Persistence.Common.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("loantrack")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("code_seq_start_one_inc");

            modelBuilder.Entity("LoanTrack.Domain.Centers.Center", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CenterLeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("center_leader_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_centers");

                    b.HasIndex("CenterLeaderId")
                        .HasDatabaseName("ix_centers_center_leader_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_centers_name");

                    b.ToTable("Centers", "loantrack");
                });

            modelBuilder.Entity("LoanTrack.Domain.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("account_name");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("address");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankBranch")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_branch");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_name");

                    b.Property<Guid?>("CenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("center_id");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code")
                        .HasDefaultValueSql("nextval('loantrack.code_seq_start_one_inc')");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Guid?>("DsDivisionId")
                        .HasColumnType("uuid")
                        .HasColumnName("ds_division_id");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<Guid?>("GramaNiladhariId")
                        .HasColumnType("uuid")
                        .HasColumnName("grama_niladhari_id");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Nic")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("nic");

                    b.Property<string>("Occupation")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("occupation");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uuid")
                        .HasColumnName("province_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("WorkAddress")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("work_address");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("CenterId")
                        .HasDatabaseName("ix_customers_center_id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_code");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_customers_district_id");

                    b.HasIndex("DsDivisionId")
                        .HasDatabaseName("ix_customers_ds_division_id");

                    b.HasIndex("GramaNiladhariId")
                        .HasDatabaseName("ix_customers_grama_niladhari_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_customers_group_id");

                    b.HasIndex("Nic")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_nic");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ix_customers_province_id");

                    b.ToTable("Customers", "loantrack");
                });

            modelBuilder.Entity("LoanTrack.Domain.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_employees_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_employees_identity_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_employees_is_active");

                    b.ToTable("Employees", "loantrack");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d08e0d8-d32a-4220-b7f5-6e3b053adb58"),
                            CreatedAt = new DateTime(2025, 5, 9, 11, 4, 13, 594, DateTimeKind.Utc).AddTicks(7967),
                            Email = "admin@email.com",
                            FirstName = "System",
                            IdentityId = "09c16865-ee5a-466f-aff4-acbd5eaf8dd8",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Admin",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("LoanTrack.Domain.Finance.FinanceJournal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly>("JournalDate")
                        .HasColumnType("date")
                        .HasColumnName("journal_date");

                    b.Property<string>("JournalType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("journal_type");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("reference_id");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("reference_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_finance_journals");

                    b.ToTable("FinanceJournals", "loantrack");
                });

            modelBuilder.Entity("LoanTrack.Domain.Groups.CustomerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("center_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_customer_groups");

                    b.HasIndex("CenterId")
                        .HasDatabaseName("ix_customer_groups_center_id");

                    b.HasIndex("Name", "CenterId")
                        .IsUnique()
                        .HasDatabaseName("ix_customer_groups_name_center_id");

                    b.ToTable("CustomerGroups", "loantrack");
                });

            modelBuilder.Entity("LoanTrack.Domain.ListValues.ListValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("ListType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("list_type");

                    b.Property<Guid>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"))
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_list_values");

                    b.HasIndex("ListType", "Description", "ParentId")
                        .IsUnique()
                        .HasDatabaseName("ix_list_values_list_type_description_parent_id");

                    b.ToTable("ListValues", "loantrack");
                });

            modelBuilder.Entity("LoanTrack.Domain.LoanSchemes.LoanScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AllowedLoanPurposes")
                        .HasColumnType("jsonb")
                        .HasColumnName("allowed_loan_purposes");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CollateralType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("collateral_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("EligibleBorrowerTypes")
                        .HasColumnType("jsonb")
                        .HasColumnName("eligible_borrower_types");

                    b.Property<int>("GracePeriodInMonths")
                        .HasColumnType("integer")
                        .HasColumnName("grace_period_in_months");

                    b.Property<bool>("HasFixedInterestRate")
                        .HasColumnType("boolean")
                        .HasColumnName("has_fixed_interest_rate");

                    b.Property<double>("InsuranceAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("insurance_amount");

                    b.Property<double>("InterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("interest_rate");

                    b.Property<string>("InterestType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("interest_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsGovernmentSubsidized")
                        .HasColumnType("boolean")
                        .HasColumnName("is_government_subsidized");

                    b.Property<bool>("IsSecuredLoan")
                        .HasColumnType("boolean")
                        .HasColumnName("is_secured_loan");

                    b.Property<double>("LatePaymentPenalty")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("late_payment_penalty");

                    b.Property<double>("MaximumAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("maximum_amount");

                    b.Property<double>("MinimumAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("minimum_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<double>("ProcessingFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("processing_fee");

                    b.Property<int>("RepaymentPeriodsInMonths")
                        .HasColumnType("integer")
                        .HasColumnName("repayment_periods_in_months");

                    b.Property<bool>("RequiresGuarantor")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_guarantor");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_loan_schemes");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_loan_schemes_is_active");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_loan_schemes_name");

                    b.ToTable("LoanSchemes", "loantrack");
                });

            modelBuilder.Entity("LoanTrack.Domain.Loans.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("ClosedDate")
                        .HasColumnType("date")
                        .HasColumnName("closed_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DurationInInterestUnits")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_interest_units");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("GuarantorsInformation")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("guarantors_information");

                    b.Property<double>("InstallmentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("installment_amount");

                    b.Property<string>("InstallmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("installment_type");

                    b.Property<double>("InsuranceAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("insurance_amount");

                    b.Property<double>("InterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("interest_rate");

                    b.Property<string>("InterestType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("interest_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly?>("IssuanceDate")
                        .HasColumnType("date")
                        .HasColumnName("issuance_date");

                    b.Property<double>("LoanAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("loan_amount");

                    b.Property<string>("LoanDisbursementMethod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("loan_disbursement_method");

                    b.Property<string>("LoanNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("loan_number");

                    b.Property<string>("LoanOfficer")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("loan_officer");

                    b.Property<string>("LoanRepaymentMethod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("loan_repayment_method");

                    b.Property<Guid?>("LoanSchemeId")
                        .HasColumnType("uuid")
                        .HasColumnName("loan_scheme_id");

                    b.Property<string>("LoanStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("loan_status");

                    b.Property<DateOnly?>("NextInstallmentDate")
                        .HasColumnType("date")
                        .HasColumnName("next_installment_date");

                    b.Property<double>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("paid_amount");

                    b.Property<double>("ProcessingFee")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("processing_fee");

                    b.Property<int>("RepaymentDurations")
                        .HasColumnType("integer")
                        .HasColumnName("repayment_durations");

                    b.Property<double>("TotalAmountPayable")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount_payable");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_loans");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_loans_customer_id");

                    b.HasIndex("LoanNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_loans_loan_number");

                    b.HasIndex("LoanSchemeId")
                        .HasDatabaseName("ix_loans_loan_scheme_id");

                    b.ToTable("Loans", "loantrack");
                });

            modelBuilder.Entity("LoanTrack.Domain.Loans.LoanInstallment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AmountPaid")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("amount_paid");

                    b.Property<int>("DelayedDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("delayed_days");

                    b.Property<double>("InstallmentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("installment_amount");

                    b.Property<DateOnly>("InstallmentDate")
                        .HasColumnType("date")
                        .HasColumnName("installment_date");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("integer")
                        .HasColumnName("installment_number");

                    b.Property<bool>("IsDelayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_delayed");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsPenaltyApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_penalty_applied");

                    b.Property<Guid>("LoanId")
                        .HasColumnType("uuid")
                        .HasColumnName("loan_id");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentDescription")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("payment_description");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("payment_method");

                    b.Property<double>("PenaltyAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("penalty_amount");

                    b.Property<string>("PenaltyReason")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("penalty_reason");

                    b.HasKey("Id")
                        .HasName("pk_loan_installments");

                    b.HasIndex("LoanId", "IsPaid")
                        .HasDatabaseName("ix_loan_installments_loan_id_is_paid");

                    b.ToTable("LoanInstallments", "loantrack");
                });

            modelBuilder.Entity("LoanTrack.Domain.Centers.Center", b =>
                {
                    b.HasOne("LoanTrack.Domain.Customers.Customer", "CenterLeader")
                        .WithMany()
                        .HasForeignKey("CenterLeaderId")
                        .HasConstraintName("fk_centers_customers_center_leader_id");

                    b.Navigation("CenterLeader");
                });

            modelBuilder.Entity("LoanTrack.Domain.Customers.Customer", b =>
                {
                    b.HasOne("LoanTrack.Domain.Centers.Center", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_customers_centers_center_id");

                    b.HasOne("LoanTrack.Domain.ListValues.ListValue", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customers_list_values_district_id");

                    b.HasOne("LoanTrack.Domain.ListValues.ListValue", "DsDivision")
                        .WithMany()
                        .HasForeignKey("DsDivisionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customers_list_values_ds_division_id");

                    b.HasOne("LoanTrack.Domain.ListValues.ListValue", "GramaNiladhari")
                        .WithMany()
                        .HasForeignKey("GramaNiladhariId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customers_list_values_grama_niladhari_id");

                    b.HasOne("LoanTrack.Domain.Groups.CustomerGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customers_customer_groups_group_id");

                    b.HasOne("LoanTrack.Domain.ListValues.ListValue", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_customers_list_values_province_id");

                    b.Navigation("Center");

                    b.Navigation("District");

                    b.Navigation("DsDivision");

                    b.Navigation("GramaNiladhari");

                    b.Navigation("Group");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("LoanTrack.Domain.Groups.CustomerGroup", b =>
                {
                    b.HasOne("LoanTrack.Domain.Centers.Center", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_groups_centers_center_id");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("LoanTrack.Domain.Loans.Loan", b =>
                {
                    b.HasOne("LoanTrack.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_loans_customers_customer_id");

                    b.HasOne("LoanTrack.Domain.LoanSchemes.LoanScheme", "LoanScheme")
                        .WithMany()
                        .HasForeignKey("LoanSchemeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_loans_loan_schemes_loan_scheme_id");

                    b.Navigation("Customer");

                    b.Navigation("LoanScheme");
                });

            modelBuilder.Entity("LoanTrack.Domain.Loans.LoanInstallment", b =>
                {
                    b.HasOne("LoanTrack.Domain.Loans.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loan_installments_loans_loan_id");

                    b.Navigation("Loan");
                });
#pragma warning restore 612, 618
        }
    }
}
